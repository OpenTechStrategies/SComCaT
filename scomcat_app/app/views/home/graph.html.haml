%h4.page-title Dependency Graph

%div#dependency-graph-svg-div

:javascript
  var width = 1000,
    height = 1000;

  var force = d3.layout.force()
    .size([width, height])
    .linkDistance(60)
    .charge(-500)
    .gravity(0.2)
    .on("tick", tick);

  var svg = d3.select("#dependency-graph-svg-div").append("svg")
    .attr("width", width)
    .attr("height", height);

  var view = svg.append("view")
    .attr("id", "view")
    .attr("viewBox", "1000 1000 1000 1000");

  var path = svg.append("g").selectAll("path"),
    circle = svg.append("g").selectAll("circle"),
    hypertext = svg.append("g").selectAll("text");

  var marker = svg.append("defs").append("marker")
    .attr("id", "arrow")
    .attr("viewBox", "0 -5 10 10")
    .attr("refX", 15)
    .attr("refY", -1.5)
    .attr("markerWidth", 5)
    .attr("markerHeight", 5)
    .attr("orient", "auto")
    .append("path")
      .attr("d", "M0,-3L8,0L0,3");

  var data = getData();
  var nodes = data.nodes;
  var links = data.links;

  update(links);

  function update(links) {
      // Compute the distinct nodes from the links.
    links.forEach(function (link) {
      link.source = nodes[link.source];
      link.target = nodes[link.target];
    });

    force.nodes(nodes)
      .links(links)
      .start();

      // -------------------------------

      // Compute the data join. This returns the update selection.
    path = path.data(force.links());

      // Remove any outgoing/old paths.
    path.exit().remove();

      // Compute new attributes for entering and updating paths.
    path.enter().append("path")
      .attr("class", "link")
      .attr("marker-end", "url(#arrow)");

      // -------------------------------

      // Compute the data join. This returns the update selection.
    circle = circle.data(force.nodes());

      // Add any incoming circles.
    circle.enter().append("circle");

      // Remove any outgoing/old circles.
    circle.exit().remove();

      // Compute new attributes for entering and updating circles.
    circle.attr("r", 6)
      .attr("is", function(d){return "node-"+d.name})
      .call(force.drag);


      // Compute the data join. This returns the update selection.
    hypertext  = hypertext .data(force.nodes());

      // Add any incoming texts.
    hypertext.enter().append("text")
      .append("a")
      //.attr("xlink:show", "new")
          .attr("target", "_blank");

      // Remove any outgoing/old texts.
    hypertext.exit().remove();

      // Compute new attributes for entering and updating texts.
    hypertext.attr("x", 8)
      .attr("y", ".31em")
    .select("a")
    .attr("xlink:href", function (d) {
      return "/technologies/" + d.slug;
    })
    .text(function (d) {
      return d.name;
    });
  }

  // Use elliptical arc path segments to doubly-encode directionality.
  function tick() {
    path.attr("d", linkArc);
    circle.attr("transform", transform);
    hypertext.attr("transform", transform);
  }

  function linkArc(d) {
    var dx = d.target.x - d.source.x,
      dy = d.target.y - d.source.y,
      dr = Math.sqrt(dx * dx + dy * dy);
    return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
  }

  function transform(d) {
    return "translate(" + d.x + "," + d.y + ")";
  }


  function getData() {
    return #{@graph};
  }